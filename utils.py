# -*- coding: utf-8 -*-
"""utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uTKKgq9mgq30Pj7kthPxcuEes5YyAbSV
"""

!pip install feedparser
!pip install beautifulsoup4
!pip install nltk
!pip install gTTS

import requests
import feedparser
from bs4 import BeautifulSoup
import nltk
from nltk.corpus import stopwords
from nltk.sentiment import SentimentIntensityAnalyzer
from gtts import gTTS
import os

nltk.download('punkt')
nltk.download('stopwords')
nltk.download('vader_lexicon')

# Get news articles using Google News RSS
def get_news_articles(company_name):
    url = f"https://news.google.com/rss/search?q={company_name}&hl=en-IN&gl=IN&ceid=IN:en"
    feed = feedparser.parse(url)

    articles = []
    for entry in feed.entries[:10]:
        article_data = {
            'title': entry.title,
            'summary': entry.summary,
            'link': entry.link
        }
        articles.append(article_data)
    return articles

# Clean and tokenize text
def clean_and_tokenize(text):
    stop_words = set(stopwords.words('english'))
    words = nltk.word_tokenize(text.lower())
    words = [word for word in words if word.isalnum() and word not in stop_words]
    return words

# Analyze sentiment and extract topics
def analyze_sentiment_and_extract_topics(text):
    sia = SentimentIntensityAnalyzer()
    sentiment_score = sia.polarity_scores(text)

    if sentiment_score['compound'] > 0.05:
        sentiment = 'Positive'
    elif sentiment_score['compound'] < -0.05:
        sentiment = 'Negative'
    else:
        sentiment = 'Neutral'

    # Extract topics
    words = clean_and_tokenize(text)
    topics = list(set(words))[:10]

    return sentiment, topics

# Perform comparative sentiment analysis
def comparative_sentiment_analysis(sentiment_results):
    sentiment_distribution = {'Positive': 0, 'Negative': 0, 'Neutral': 0}
    topics_set = set()

    for result in sentiment_results:
        sentiment_distribution[result['sentiment']] += 1
        topics_set.update(result['topics'])

    common_topics = list(topics_set)
    comparison_summary = []

    if len(sentiment_results) > 1:
        comparison_summary.append({
            'Comparison': f"Article 1 vs Article 2",
            'Sentiment Difference': f"{sentiment_results[0]['sentiment']} vs {sentiment_results[1]['sentiment']}",
            'Impact': f"Article 1 focuses on {', '.join(sentiment_results[0]['topics'])}, while Article 2 highlights {', '.join(sentiment_results[1]['topics'])}."
        })

    return {
        'Sentiment Distribution': sentiment_distribution,
        'Coverage Differences': comparison_summary,
        'Topic Overlap': {'Common Topics': common_topics}
    }

# Generate Hindi audio from summary
def generate_hindi_tts(text, output_file="sentiment_report_hi.mp3"):
    try:
        tts = gTTS(text, lang="hi")
        tts.save(output_file)
        return output_file
    except Exception as e:
        raise Exception(f"Error generating TTS: {e}")

