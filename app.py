# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k5pucb_ixOpt3s0n4MlEh0Bqw0Rhy1AO
"""

!pip install feedparser
!pip install requests
!pip install beautifulsoup4
!pip install nltk
!pip install gTTS

nltk.download('punkt_tab')

# Import necessary libraries
import feedparser
import requests
from bs4 import BeautifulSoup
from nltk.sentiment import SentimentIntensityAnalyzer
import nltk
from gtts import gTTS
import os
from nltk.tokenize import word_tokenize

# Download NLTK resources (Run once)
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('vader_lexicon')

# -----------------------------
# Step 1: Fetch and parse news articles using feedparser
def get_news_articles(company_name):
    """Fetch news articles related to a company from Google News RSS feed."""
    try:
        url = f"https://news.google.com/rss/search?q={company_name}"
        feed = feedparser.parse(url)

        articles = []
        for entry in feed.entries[:10]:  # Fetching first 10 articles
            article_data = {
                "title": entry.title,
                "link": entry.link,
                "summary": BeautifulSoup(entry.summary, "html.parser").text
            }
            articles.append(article_data)
        return articles
    except Exception as e:
        print(f"‚ùå Error fetching news: {e}")
        return []

# -----------------------------
# Step 2: Analyze sentiment and extract topics
def analyze_sentiment_and_extract_topics(text):
    """Perform sentiment analysis and extract keywords."""
    # Initialize sentiment analyzer
    analyzer = SentimentIntensityAnalyzer()
    sentiment_score = analyzer.polarity_scores(text)['compound']

    # Determine sentiment label
    if sentiment_score >= 0.05:
        sentiment = "Positive"
    elif sentiment_score <= -0.05:
        sentiment = "Negative"
    else:
        sentiment = "Neutral"

    # Extract topics (simple keywords)
    words = word_tokenize(text.lower())
    topics = [word for word in words if len(word) > 3]

    return sentiment, list(set(topics))

# -----------------------------
# Step 3: Comparative Sentiment Analysis
def comparative_sentiment_analysis(results):
    """Compare sentiments and analyze coverage differences."""
    positive_count = sum(1 for res in results if res['sentiment'] == "Positive")
    negative_count = sum(1 for res in results if res['sentiment'] == "Negative")
    neutral_count = sum(1 for res in results if res['sentiment'] == "Neutral")

    # Identify coverage differences
    coverage_differences = []
    for i in range(len(results)):
        for j in range(i + 1, len(results)):
            comparison = f"Article {i+1} vs Article {j+1}"
            impact = f"Article {i+1} focuses on {', '.join(results[i]['topics'])}, while Article {j+1} highlights {', '.join(results[j]['topics'])}."
            coverage_differences.append({"Comparison": comparison, "Impact": impact})

    # Find topic overlap
    common_topics = set(results[0]['topics'])
    unique_topics = set(results[0]['topics'])
    for res in results[1:]:
        common_topics &= set(res['topics'])
        unique_topics |= set(res['topics'])

    return {
        "Sentiment Distribution": {
            "Positive": positive_count,
            "Negative": negative_count,
            "Neutral": neutral_count,
        },
        "Coverage Differences": coverage_differences,
        "Topic Overlap": {
            "Common Topics": list(common_topics),
            "Unique Topics": list(unique_topics),
        },
    }

# -----------------------------
# Step 4: Generate Hindi Audio from Summary
def generate_hindi_tts(text, output_file="sentiment_report_hi.mp3"):
    """Convert text to Hindi audio using gTTS."""
    try:
        tts = gTTS(text, lang="hi")
        tts.save(output_file)
        print(f"‚úÖ Hindi audio saved as: {output_file}")
    except Exception as e:
        print(f"‚ùå Error generating Hindi TTS: {e}")

# -----------------------------
# Main Execution - Bringing Everything Together
if __name__ == "__main__":
    # User Input: Company Name
    company_name = input("Enter the company name: ")

    # Step 1: Fetch articles
    articles = get_news_articles(company_name)

    if not articles:
        print("‚ùå No articles found. Exiting...")
        exit()

    # Step 2: Analyze sentiment and extract topics for each article
    sentiment_results = []
    for article in articles:
        sentiment, topics = analyze_sentiment_and_extract_topics(article['summary'])
        sentiment_results.append({'sentiment': sentiment, 'topics': topics})

    print("‚úÖ Sentiment and topics extracted successfully!")

    # Step 3: Perform comparative sentiment analysis
    comparative_report = comparative_sentiment_analysis(sentiment_results)

    # Step 4: Prepare structured summary text in English
    summary_text_english = """
    Summary Report:
    Positive: {positive_count}
    Negative: {negative_count}
    Neutral: {neutral_count}

    Coverage Differences:
    {comparison_summary}

    Common Topics: {common_topics}
    Unique Topics: {unique_topics}
    """.format(
        positive_count=comparative_report['Sentiment Distribution']['Positive'],
        negative_count=comparative_report['Sentiment Distribution']['Negative'],
        neutral_count=comparative_report['Sentiment Distribution']['Neutral'],
        comparison_summary=comparative_report['Coverage Differences'][0]['Impact'],
        common_topics=', '.join(comparative_report['Topic Overlap']['Common Topics']),
        unique_topics=', '.join(comparative_report['Topic Overlap']['Unique Topics'])
    )

    print("üì¢ Summary in English:\n", summary_text_english)

    # Step 5: Generate Hindi audio from the summary
    hindi_translation = "‡§Ø‡§π ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§¨‡§§‡§æ‡§§‡•Ä ‡§π‡•à ‡§ï‡§ø {positive_count} ‡§≤‡•á‡§ñ ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§π‡•à‡§Ç, {negative_count} ‡§≤‡•á‡§ñ ‡§®‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§π‡•à‡§Ç, ‡§î‡§∞ {neutral_count} ‡§≤‡•á‡§ñ ‡§§‡§ü‡§∏‡•ç‡§• ‡§π‡•à‡§Ç‡•§ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§µ‡§ø‡§∑‡§Ø ‡§π‡•à‡§Ç: {common_topics}, ‡§î‡§∞ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§µ‡§ø‡§∑‡§Ø ‡§π‡•à‡§Ç: {unique_topics}.".format(
        positive_count=comparative_report['Sentiment Distribution']['Positive'],
        negative_count=comparative_report['Sentiment Distribution']['Negative'],
        neutral_count=comparative_report['Sentiment Distribution']['Neutral'],
        common_topics=', '.join(comparative_report['Topic Overlap']['Common Topics']),
        unique_topics=', '.join(comparative_report['Topic Overlap']['Unique Topics'])
    )

    # Call the function to generate audio
    generate_hindi_tts(hindi_translation)

